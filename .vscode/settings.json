{
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit",
  },
  "folderTemplates.templateFolderPath": ".fttemplates",
  "folderTemplates.structures": [
    {
      "name": "React Component",
      "structure": [
        {
          "fileName": "<FTName>.module.scss",
          "template": ".<FTName>{\n\n}"
        },
        {
          "fileName": "<FTName>.stories.tsx",
          "template": [
            "import { ComponentMeta, ComponentStory } from '@storybook/react';",
            "import { StoreDecorator } from '@/shared/config/storybook/StoreDecorator/StoreDecorator';",
            "import { Theme } from '@/app/providers/ThemeProvider';",
            "import { ThemeDecorator } from '@/shared/config/storybook/ThemeDecorator/ThemeDecorator';",
            "import { <FTName> } from './<FTName>';",
            "",
            "export default {",
            "    title: 'shared/<FTName>',",
            "    component: <FTName>,",
            "    argTypes: {",
            "        backgroundColor: { control: 'color' },",
            "    },",
            "} as ComponentMeta<typeof <FTName>>;",
            "",
            "const Template: ComponentStory<typeof <FTName>> = (args) => <<FTName> {...args} />;",
            "",
            "export const Normal = Template.bind({});",
            "Normal.args = {};",
            "Normal.decorators = [",
            "    StoreDecorator({}),",
            "];",
            "",
            "export const Dark = Template.bind({});",
            "Dark.args = {};",
            "Dark.decorators = [",
            "    StoreDecorator({}),",
            "    ThemeDecorator(Theme.DARK),",
            "];"
          ]
        },
        {
          "fileName": "<FTName>.tsx",
          "template": [
            "import { classNames } from '@/shared/lib/classNames/classNames';",
            "import { useTranslation } from 'react-i18next';",
            "import { memo } from 'react';",
            "import cls from './<FTName>.module.scss';",
            "",
            "interface <FTName>Props {",
            "  className?: string;",
            "}",
            "",
            "export const <FTName> = memo((props: <FTName>Props) => {",
            "  const { className } = props;",
            "  const { t } = useTranslation();",
            "",
            "  return (",
            "    <div className={classNames(cls.<FTName>, {}, [className])}>",
            "    </div>",
            "  );",
            "});",
          ]
        }
      ]
    }
  ]
}